import React, { useEffect, useState } from 'react';
import { useSearchParams, useNavigate } from 'react-router-dom';
import './PaymentPages.css';

const PaymentSuccessPage = () => {
	const [searchParams] = useSearchParams();
	const navigate = useNavigate();
	const [paymentInfo, setPaymentInfo] = useState(null);
	const [loading, setLoading] = useState(true);
	const [error, setError] = useState(null);

	useEffect(() => {
		const orderId = searchParams.get('orderId');
		const transactionId = searchParams.get('transactionId');
		const amount = searchParams.get('amount');
		const status = searchParams.get('status');
		const upgradedToPro = searchParams.get('upgradedToPro') === 'true';
		const message = searchParams.get('message');

		// Verify payment with backend
		const verifyPayment = async () => {
			try {
				const token = localStorage.getItem('token');
				if (!token) {
					setError('Token kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
					setLoading(false);
					return;
				}

				const response = await fetch(`/api/payment/check-payment-result?orderId=${orderId}`, {
					headers: {
						'Authorization': `Bearer ${token}`,
						'Content-Type': 'application/json'
					}
				});

				if (response.ok) {
					const data = await response.json();
					setPaymentInfo(data);
				} else if (response.status === 401) {
					setError('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
				} else if (response.status === 404) {
					setError('Kh√¥ng t√¨m th·∫•y th√¥ng tin thanh to√°n.');
				} else {
					setError('C√≥ l·ªói x·∫£y ra khi x√°c th·ª±c thanh to√°n.');
				}
			} catch (error) {
				console.error('Error verifying payment:', error);
				setError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i.');
			} finally {
				setLoading(false);
			}
		};

		if (orderId) {
			verifyPayment();
		} else {
			setError('Thi·∫øu th√¥ng tin ƒë∆°n h√†ng.');
			setLoading(false);
		}
	}, [searchParams]);

	const handleGoHome = () => {
		navigate('/');
	};

	const handleGoDashboard = () => {
		navigate('/dashboard');
	};

	if (loading) {
		return (
			<div className="payment-loading">
				<div className="loading-spinner"></div>
				<p>ƒêang x√°c th·ª±c thanh to√°n...</p>
			</div>
		);
	}

	if (error) {
		return (
			<div className="payment-error">
				<div className="error-icon">‚ö†Ô∏è</div>
				<h1>L·ªói x√°c th·ª±c</h1>
				<p>{error}</p>
				<div className="actions">
					<button onClick={handleGoHome}>V·ªÅ trang ch·ªß</button>
					<button onClick={() => window.location.reload()}>Th·ª≠ l·∫°i</button>
				</div>
			</div>
		);
	}

	return (
		<div className="payment-success">
			<div className="success-icon">‚úÖ</div>
			<h1>Thanh to√°n th√†nh c√¥ng!</h1>

			{paymentInfo?.isPro && (
				<div className="pro-upgrade-notice">
					<h2>üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë∆∞·ª£c n√¢ng c·∫•p l√™n Pro</h2>
					<p>B√¢y gi·ªù b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng t·∫•t c·∫£ c√°c t√≠nh nƒÉng Pro c·ªßa ·ª©ng d·ª•ng:</p>
					<ul>
						<li>‚úÖ T·∫°o kh√¥ng gi·ªõi h·∫°n bi·ªÉu ƒë·ªì</li>
						<li>‚úÖ Xu·∫•t d·ªØ li·ªáu ch·∫•t l∆∞·ª£ng cao</li>
						<li>‚úÖ Truy c·∫≠p c√°c template premium</li>
						<li>‚úÖ H·ªó tr·ª£ ∆∞u ti√™n</li>
					</ul>
				</div>
			)}

			<div className="payment-details">
				<h3>Chi ti·∫øt giao d·ªãch:</h3>
				<div className="detail-row">
					<span className="label">M√£ ƒë∆°n h√†ng:</span>
					<span className="value">{paymentInfo?.orderId}</span>
				</div>
				<div className="detail-row">
					<span className="label">M√£ giao d·ªãch:</span>
					<span className="value">{paymentInfo?.transactionId}</span>
				</div>
				<div className="detail-row">
					<span className="label">S·ªë ti·ªÅn:</span>
					<span className="value">{paymentInfo?.amount?.toLocaleString('vi-VN')} VND</span>
				</div>
				<div className="detail-row">
					<span className="label">Tr·∫°ng th√°i:</span>
					<span className="value status-success">{paymentInfo?.status}</span>
				</div>
				<div className="detail-row">
					<span className="label">Th·ªùi gian:</span>
					<span className="value">
						{paymentInfo?.updatedAt ? new Date(paymentInfo.updatedAt).toLocaleString('vi-VN') : 'N/A'}
					</span>
				</div>
			</div>

			<div className="actions">
				<button className="btn-primary" onClick={handleGoDashboard}>
					ƒêi ƒë·∫øn Dashboard
				</button>
				<button className="btn-secondary" onClick={handleGoHome}>
					V·ªÅ trang ch·ªß
				</button>
			</div>

			<div className="help-text">
				<p>N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, vui l√≤ng li√™n h·ªá h·ªó tr·ª£ kh√°ch h√†ng.</p>
			</div>
		</div>
	);
};

export default PaymentSuccessPage; 